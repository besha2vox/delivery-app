{"version":3,"file":"static/js/728.5de1bb10.chunk.js","mappings":"kMAAO,IAAMA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,EAEtBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,WAAhB,EAEzBC,EAAsB,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,SAAhB,C,yFCD3BC,GAAeC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4lBAMZ,qBAAGE,WAA+B,UAAY,KAA9C,I,UCkBb,EAvBoB,SAAC,GAMd,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,cAEI,IADJJ,WAAAA,OACI,SACJ,OACE,UAACH,EAAD,CAAcQ,GAAIJ,EAAMK,QAASF,EAAjC,WACE,gBAAKG,IAAKL,EAAMM,IAAKL,IACpBH,IAAc,wBAAKG,MAGzB,C,oKCfYM,EAAeX,EAAAA,GAAAA,GAAH,qQ,UCkDzB,EA1CiB,WACf,OAA0CY,EAAAA,EAAAA,UAASC,OAAOC,YAA1D,eAAOC,EAAP,KAAsBC,EAAtB,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAOC,EAAAA,EAAAA,IAAYzB,EAAAA,IACnB0B,GAAWC,EAAAA,EAAAA,MACXpB,EAAaa,GAAiB,IAiBpC,OAfAQ,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,GAAYP,GACtB,GAAE,CAACI,EAAUJ,KAEdM,EAAAA,EAAAA,YAAU,WACR,IAAME,EAAe,WACnBT,EAAiBH,OAAOC,WACzB,EAGD,OADAD,OAAOa,iBAAiB,SAAUD,GAC3B,WACLZ,OAAOc,oBAAoB,SAAUF,EACtC,CACF,GAAE,KAGD,gCACKN,IACD,SAACR,EAAD,UACGQ,EAAKS,WAAWC,KAAI,WAAuBC,GAAvB,IAAGC,EAAH,EAAGA,IAAK1B,EAAR,EAAQA,KAAM2B,EAAd,EAAcA,MAAd,OACnB,yBACE,SAACC,EAAA,EAAD,CACE/B,WAAYA,EACZC,KAAME,EACNA,KAAMA,EACND,KAAM4B,KALDD,EADU,OAc9B,EChDYG,EAAclC,EAAAA,GAAAA,IAAH,+DCexB,EAXa,WACX,OACE,UAACkC,EAAD,YACE,SAAC,EAAD,KACA,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C","sources":["redux/shops/selectors.js","shared/components/ButtonImage/ButtonImage.styled.jsx","shared/components/ButtonImage/ButtonImage.jsx","shared/components/MenuList/MenuList.styled.jsx","shared/components/MenuList/MenuList.jsx","shared/components/Menu/Menu.styled.jsx","shared/components/Menu/Menu.jsx"],"sourcesContent":["export const selectAllShops = state => state.shops.items;\n\nexport const selectCurrentShop = state => state.shops.currentShop;\n\nexport const selectShopIsLoading = state => state.shops.isLoading;\n\nexport const selectShopError = state => state.shops.error;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const ImageNavLink = styled(NavLink)`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: start;\n  gap: 8px;\n  padding: ${({ isNameShow }) => (isNameShow ? '4px 8px' : '8px')};\n\n  border-radius: 40px;\n  background-color: #fdf9f6;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  transition-property: box-shadow, background-color, color;\n  transition-duration: 300ms;\n  transition-timing-function: ease-in-out;\n\n  &:hover {\n    box-shadow: 7px 13px 14px rgba(116, 177, 232, 0.24);\n  }\n\n  &.active {\n    background-color: #f09440;\n    color: #fdf9f6;\n  }\n\n  & img {\n    max-height: 40px;\n    border-radius: 50%;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { ImageNavLink } from './ButtonImage.styled';\n\nconst ButtonImage = ({\n  path,\n  logo,\n  name,\n  handleClicler,\n  isNameShow = true,\n}) => {\n  return (\n    <ImageNavLink to={path} onClick={handleClicler}>\n      <img src={logo} alt={name} />\n      {isNameShow && <h3>{name}</h3>}\n    </ImageNavLink>\n  );\n};\n\nButtonImage.propTypes = {\n  name: PropTypes.string.isRequired,\n  logo: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  handleClicler: PropTypes.func,\n  isNameShow: PropTypes.bool,\n};\n\nexport default ButtonImage;\n","import styled from 'styled-components';\n\nexport const CategoryList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-right: 12px;\n  width: fit-content;\n  height: 100%;\n\n  border-right: 3px solid #f0944024;\n\n  @media screen and (max-width: 1199px) {\n    padding-left: 12px;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { selectCurrentShop } from '../../../redux/shops/selectors';\nimport { getShopById } from '../../../redux/shops/operations';\n\nimport ButtonImage from '../ButtonImage/ButtonImage';\nimport { CategoryList } from './MenuList.styled';\n\nconst MenuList = () => {\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\n  const { shopId } = useParams();\n  const shop = useSelector(selectCurrentShop);\n  const dispatch = useDispatch();\n  const isNameShow = viewportWidth >= 768;\n\n  useEffect(() => {\n    dispatch(getShopById(shopId));\n  }, [dispatch, shopId]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setViewportWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <>\n      {!!shop && (\n        <CategoryList>\n          {shop.categories.map(({ _id, name, image }, indx) => (\n            <li key={_id}>\n              <ButtonImage\n                isNameShow={isNameShow}\n                path={name}\n                name={name}\n                logo={image}\n              />\n            </li>\n          ))}\n        </CategoryList>\n      )}\n    </>\n  );\n};\n\nexport default MenuList;\n","import styled from 'styled-components';\n\nexport const MenuWrapper = styled.div`\n    display: flex;\n    height: 100%;\n`;\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport MenuList from '../MenuList/MenuList';\nimport { MenuWrapper } from './Menu.styled';\n\nconst Menu = () => {\n  return (\n    <MenuWrapper>\n      <MenuList />\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </MenuWrapper>\n  );\n};\n\nexport default Menu;\n"],"names":["selectAllShops","state","shops","items","selectCurrentShop","currentShop","selectShopIsLoading","isLoading","ImageNavLink","styled","NavLink","isNameShow","path","logo","name","handleClicler","to","onClick","src","alt","CategoryList","useState","window","innerWidth","viewportWidth","setViewportWidth","shopId","useParams","shop","useSelector","dispatch","useDispatch","useEffect","getShopById","handleResize","addEventListener","removeEventListener","categories","map","indx","_id","image","ButtonImage","MenuWrapper","Suspense","fallback"],"sourceRoot":""}